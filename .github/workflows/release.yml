name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  pull-requests: read

concurrency:
  group: release-main
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Set up Node.js and enable npm cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Run integration tests
        run: xvfb-run --auto-servernum --server-args='-screen 0 1280x1024x24' npm run test:integration

      - name: Fetch PR number for commit
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --state merged --search "${{ github.sha }}" --json number,mergeCommit --jq '.[] | select(.mergeCommit.oid == "${{ github.sha }}") | .number')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Fetch PR labels
        id: pr_labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LABELS=$(gh pr view ${{ steps.pr.outputs.pr_number }} --json labels --jq '[.labels[].name] | join(" ")')
          echo "labels=$LABELS" >> $GITHUB_OUTPUT

      - name: Fetch latest tag and calculate next version
        id: next_version
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          VERSION=${TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          LABELS="${{ steps.pr_labels.outputs.labels }}"
          if [[ "$LABELS" == *"version:major"* ]]; then
            MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
          elif [[ "$LABELS" == *"version:minor"* ]]; then
            MINOR=$((MINOR + 1)); PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          while git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; do
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          done

          echo "new_version=$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update manifest.json and package.json version
        run: |
          jq --arg v "${{ steps.next_version.outputs.new_version }}" '.version = $v' manifest.json > tmp && mv tmp manifest.json
          jq --arg v "${{ steps.next_version.outputs.new_version }}" '.version = $v' package.json > tmp && mv tmp package.json

      - name: Create zip for release
        run: |
          ZIP_NAME="ImageRemover-${{ steps.next_version.outputs.new_version }}.zip"
          zip -r "$ZIP_NAME" \
            background.js \
            camera-x-icon-16x16.png \
            camera-x-icon-48x48.png \
            camera-x-icon-128x128.png \
            content.js \
            manifest.json \
            popup.html \
            popup.js
          echo "zip_name=$ZIP_NAME" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.next_version.outputs.new_version }}
          name: Release v${{ steps.next_version.outputs.new_version }}
          files: ${{ env.zip_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
